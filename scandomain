#! /usr/bin/python3

import dns.resolver
import urllib3
import sys

def has_ms(mx_record_parm, contains_value):
	return_value = False
	if contains_value in  mx_record_parm:
		return_value = True
	return return_value

def detect_duplicate_domain(current_domain):
	return_value = False
	x = 0
	while x < domain_list_inc :
		if current_domain == domain_list[x]:
			global domain_duplicates_inc
			domain_duplicates_inc += 1
			return_value = True
		x += 1
	return return_value

def test_domain(current_domain):
	return_value = True
	global mailservers
	try:
		mailservers = dns.resolver.query(current_domain, 'MX')
	except:
		return_value =  False
	return return_value

def repair_domain(current_domain):
	global domain
	current_domain_s = current_domain.replace("<","")
	current_domain_t = current_domain_s.replace(">","")
	current_domain_s = current_domain_t.replace(" ","")
	current_domain = current_domain_s.replace("\n","")
	result_domain = test_domain(current_domain)
	repaired_domain=current_domain
	#print ("Repaired domain: ", repaired_domain)
	if result_domain == False:
		array_domain = current_domain.split(".")
		len_domain = len(array_domain)
		repaired_domain = array_domain[len_domain - 2] + "." + array_domain[len_domain - 1]
		result_domain = test_domain(repaired_domain)
		if result_domain == False:
			repaired_domain = current_domain_s.replace("-","")
			result_domain = test_domain(repaired_domain)
			if result_domain == False:
				repaired_domain = current_domain[:-2] + "." + current_domain[-2:]
				result_domain = test_domain(repaired_domain)
				if result_domain == False:
					repaired_domain = current_domain[:-3] + "." + current_domain[-3:]
					result_domain = test_domain(repaired_domain)
	if result_domain == True:
			domain = repaired_domain
	return result_domain



def check_http_header(current_domain):
	# Fake Firefox headers
	headers = {"Host" : "www.nasdaq.com", \
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:42.0) Gecko/20100101 Firefox/42.0", \
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", \
        "Accept-Language": "en-US,en;q=0.5", \
        "Accept-Encoding": "gzip, deflate", \
        "DNT": "1", \
        "Cookie": "clientPrefs=||||lightg; userSymbolList=EOD+&DIT; userCookiePref=true; selectedsymbolindustry=EOD,; selectedsymboltype=EOD,EVERGREEN GLOBAL DIVIDEND OPPORTUNITY FUND COMMON SHARES OF BENEFICIAL INTEREST,NYSE; c_enabled$=true", \
        "Connection": "keep-alive", }
	global http_cms_result
	global http_kind
	http_kind = "HTTPS"
	global http_error
	http_error = ""
	http_server = "empty"
	http_cms = "empty"
	global http_cms_result
	http_cms_result = ""
	http = urllib3.PoolManager()
	flat_res = ""
	try:
		#res = http.request("GET", "https://www." + current_domain, timeout=10)
		res = http.request("GET", "https://www." + current_domain, headers, timeout=10)
	except:
		#print("\nhttps failure, trying http for host www." + current_domain + "...\r")
		http_kind="no HTTPS"
		try:
			res = http.request("GET", "http://www." + current_domain, headers, timeout=10)
		except:
			http_server="ConnFailure"
			http_kind="ConnFailure"
			http_cms="ConnFailure"



	if http_server != "ConnFailure":
		#print("\nNo https, but http connected for host www." + current_domain + "...")
		try:
			http_server = res.info()["Server"]
		except:
			http_server = "Undetected"

		flat_res = str(res.info()).lower()

		if flat_res.find("drupal") > 0:
			http_cms_result = "Drupal"
		if flat_res.find("joomla") > 0:
			http_cms_result = "Joomla"
		if flat_res.find("wordpress") > 0:
			http_cms_result = "WordPress"
		if flat_res.find("craft cms") > 0:
			http_cms_result = "Craft CMS"
		if flat_res.find("wp rocket") > 0:
			http_cms_result = "WordPress"
		if flat_res.find("api.w.org") > 0:
			http_cms_result = "WordPress"
		if flat_res.find("wp-json") > 0:
			http_cms_result = "WordPress"
		if flat_res.find("xmlrpc.php") > 0:
			http_cms_result = "WordPress"
		if flat_res.find("plesklin") > 0:
			http_cms_result = "WordPress"
		if flat_res.find("varnish") > 0:
			http_cms_result = "Proxy Vernish"
		else:
			http_cms_result = "Unknown"
		res.close()
	else:
		print("http Connection Failed for : www." + current_domain)
	#print(flat_res, "CMS: ", http_cms_result)
	return http_server

#Check arguemnts
filename = sys.argv[1]

f=open(filename, "r", encoding='ISO-8859-1')
i_del = ";"
csv_export=open("output.csv", "w")

http_cms_result = ""
http_error = ""
http_unsecure = False
ms_inc = 0
nonms_inc = 0
protected_inc = 0
barracuda_inc = 0
domain_list_inc = 0
domain_duplicates_inc = 0
domain_list = []
domain_error_inc = 0
domain_repaired_inc = 0
csv_export.write("CustomerNr,CustomerName,AlreadyBCDcustomer,Domain,Email,MX_Left,MX_DomPart,MX_Preference,CustomerType,UsesBcd,WebServer,CMS,HTTPS\n")
skip_header = next(f)
for import_record in f:
	#print(import_record)
	domain_error = False
	try:
		mailadres=import_record.split(i_del)[1]
	except:
		print("Error in file")
		domain_error = True
	print("[" + str(domain_list_inc) + "]" + mailadres + "                       ", end = " \r")
	try:
		y=mailadres.split('@')[1]
	except:
		domain_error = True
	domain=y.split ('\n')[0]
	try:
		mailservers = dns.resolver.query(domain, 'MX')
	except:
		if repair_domain(domain) == False:
			print("\nError for domain: " + domain)
			domain_error_inc += 1
			domain_error = True
		else:
			print("Domain repaired for domain: " + domain)
			domain_repaired_inc += 1
	if detect_duplicate_domain(domain) == False:
		customer_type = "undefined"
		domain_list.append(domain)
		domain_list_inc += 1
		mx_preference = 1000

		atleast_one_ms = False
		atleast_one_bcd = False
		for mx_item in mailservers:
			if has_ms(mx_item.exchange.to_text(), "outlook.com") == True:
				atleast_one_ms = True
			if has_ms(mx_item.exchange.to_text(), "barracuda") == True:
				atleast_one_bcd = True
			if mx_item.preference < mx_preference:
				mx_preference = mx_item.preference
				lowest_mx = mx_item.exchange
		#print(domain + "\t" + lowest_mx.to_text() + "\t" + str(atleast_one_ms))
		#print("Checking domain number: " + str(%domain_list_inc))
		if domain_error == False:
			if has_ms(lowest_mx.to_text(),"outlook.com") == True:
				ms_inc += 1
				customer_type = "O365 Unpotected"
			else:
				if atleast_one_ms == True:
					protected_inc += 1
					customer_type = "O365 Protected"
				else:
					if atleast_one_bcd == True:
						barracuda_inc += 1
						customer_type = "Barracuda Only"
					else:
						nonms_inc += 1
						customer_type = "other"

			# Split MX record so domain is separate
			mx_left = ""
			mx_length = len(lowest_mx.to_text().rsplit("."))
			mx_right = (lowest_mx.to_text().rsplit(".")[mx_length-3] + "."
				+ lowest_mx.to_text().rsplit(".")[mx_length-2])
			for mx_part in range(0, mx_length -2):
				mx_left = mx_left + lowest_mx.to_text().rsplit(".")[mx_part]
			#print("left: " + mx_left + " *** \n")
			#print("right: " + mx_right +"\n")

			http_server=check_http_header(domain)
			#print (http_server)

			csv_export.write(import_record.split(i_del)[0] + "," +
			 	import_record.split(i_del)[2] + "," +
				import_record.split(i_del)[3].split("\n")[0] + "," +
				domain + "," +
				mailadres.split('\n')[0] + "," +
				mx_left + "," +
				mx_right + "," +
				str(mx_preference) + "," +
				customer_type + "," +
				str(atleast_one_bcd) + "," +
				http_server + "," +
				http_cms_result + "," +
				http_kind + "\n")
f.close()
csv_export.close()
print("Result of analysing email domains in search of protection.")
print("\nOffice 365 domains : " + str(ms_inc))
print("Protected by whatever with O365 failover: " + str(protected_inc))
print("Protected by Barracuda without O365 failover: " + str(barracuda_inc))
print("Others : " + str(nonms_inc))
print("Duplicate domains ignored : " + str(domain_duplicates_inc))
print("Domains treated : " + str(domain_list_inc))
print("Domain errors : " + str(domain_error_inc))
print("Domains repaired : " + str(domain_repaired_inc))
